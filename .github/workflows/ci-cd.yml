name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  AWS_REGION: us-east-1

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true

      - name: Run unit tests
        run: npm run test:unit
        continue-on-error: true

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 30

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build-extension:
    name: Build Browser Extension
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run build:extension

      - name: Upload extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: browser-extension
          path: src/browser-extension/dist/
          retention-days: 30

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'

    defaults:
      run:
        working-directory: infrastructure/terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -var="anthropic_api_key=${{ secrets.ANTHROPIC_API_KEY }}" -out=tfplan

      - name: Upload Terraform plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infrastructure/terraform/tfplan
          retention-days: 5

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-extension]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: development
      url: ${{ steps.deploy.outputs.app_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: terraform init

      - name: Terraform Apply
        id: deploy
        working-directory: infrastructure/terraform
        run: |
          terraform apply -auto-approve \
            -var="environment=dev" \
            -var="anthropic_api_key=${{ secrets.ANTHROPIC_API_KEY }}"

          echo "app_url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT

      - name: Deploy application code
        run: |
          INSTANCE_ID=$(cd infrastructure/terraform && terraform output -raw instance_id)

          # Create deployment package
          zip -r deployment.zip src/ package.json .env.example

          # Upload to S3 (you would set this up)
          # aws s3 cp deployment.zip s3://your-bucket/deployments/

          # Use SSM to deploy on EC2
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /opt/autonomous-ai",
              "git pull || true",
              "npm install",
              "sudo systemctl restart autonomous-ai"
            ]'

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-extension]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.app_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: terraform init

      - name: Terraform Apply with approval
        id: deploy
        working-directory: infrastructure/terraform
        run: |
          terraform apply -auto-approve \
            -var="environment=prod" \
            -var="instance_type=t3.large" \
            -var="anthropic_api_key=${{ secrets.ANTHROPIC_API_KEY }}"

          echo "app_url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT

      - name: Health check
        run: |
          APP_URL="${{ steps.deploy.outputs.app_url }}"

          # Wait for application to be ready
          for i in {1..30}; do
            if curl -f "$APP_URL/health"; then
              echo "Application is healthy!"
              exit 0
            fi
            echo "Waiting for application... ($i/30)"
            sleep 10
          done

          echo "Health check failed!"
          exit 1

      - name: Rollback on failure
        if: failure()
        working-directory: infrastructure/terraform
        run: |
          echo "Deployment failed, initiating rollback..."
          # Implement rollback logic here
          # This could involve reverting to previous Terraform state
          # or redeploying the previous version

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()

    steps:
      - name: Send notification
        run: |
          echo "Deployment completed for ${{ github.ref_name }}"
          # Add Slack/Email notification here
